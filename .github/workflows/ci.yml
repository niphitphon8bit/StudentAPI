name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  build-test:
    name: Build & Test (.NET)
    runs-on: ubuntu-latest
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET SDKs
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x

      # 🌟 NuGet cache (speeds up restore)
      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj', '**/Directory.Packages.props', '**/global.json', '**/nuget.config') }}
          restore-keys: |
            nuget-${{ runner.os }}-

      - name: Restore
        run: dotnet restore StudentAPI.sln

      - name: Build (Debug)
        run: dotnet build StudentAPI.sln --no-restore -c Debug

      # ✅ Runs tests, collects coverage, writes TRX
      # If coverlet.runsettings exists it will be used; otherwise we emit Cobertura via /p:
      - name: Test with coverage (Debug)
        shell: bash
        run: |
          if [ -f "coverlet.runsettings" ]; then
            echo "Using coverlet.runsettings"
            dotnet test StudentAPI.sln \
              --no-build -c Debug \
              --collect:"XPlat Code Coverage" \
              --settings coverlet.runsettings \
              --results-directory TestResults \
              --logger "trx;LogFileName=test_results.trx"
          else
            echo "coverlet.runsettings not found; using Cobertura output via properties"
            dotnet test StudentAPI.sln \
              --no-build -c Debug \
              /p:CollectCoverage=true \
              /p:CoverletOutputFormat=cobertura \
              /p:CoverletOutput=TestResults/coverage/ \
              --results-directory TestResults \
              --logger "trx;LogFileName=test_results.trx"
          fi

      # 📝 Pretty PR annotations & checks from TRX
      - name: Publish unit test results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: |
            **/TestResults/**/*.trx

      # 📊 Generate HTML coverage + a concise text summary
      - name: Generate coverage report (HTML + TextSummary)
        uses: danielpalme/ReportGenerator-GitHub-Action@v5
        with:
          reports: '**/TestResults/**/coverage.cobertura.xml'
          targetdir: 'coverage-report'
          reporttypes: 'HtmlInline_AzurePipelines;TextSummary'
          assemblyfilters: '+StudentAPI;-*.Tests'

      # 🧾 Put the summary into the job’s “Summary” tab
      - name: Add coverage summary to Job Summary
        if: always()
        shell: bash
        run: |
          if [ -f coverage-report/Summary.txt ]; then
            {
              echo "### Code Coverage"
              echo
              echo '```'
              cat coverage-report/Summary.txt
              echo '```'
            } >> "$GITHUB_STEP_SUMMARY"
          else
            echo "No coverage summary found." >> "$GITHUB_STEP_SUMMARY"
          fi

      # ⛳ Optional: fail if coverage below 70% (tweak MIN as needed)
      - name: Enforce minimum coverage
        if: always()
        shell: bash
        run: |
          MIN=70
          if [ -f coverage-report/Summary.txt ]; then
            # Grab the first percentage on the "Line coverage" line (case-insensitive, flexible spacing)
            LINE=$(grep -m1 -i 'Line[[:space:]]*coverage' coverage-report/Summary.txt || true)
            PCT=$(awk '{
              for (i=1; i<=NF; i++) {
                if ($i ~ /%$/) { gsub("%","",$i); print $i; exit }
              }
            }' <<< "$LINE")

            echo "Detected line coverage: ${PCT:-N/A}%"
            if [ -n "$PCT" ]; then
              PCT_INT=$(printf "%.0f" "$PCT")
              if [ "$PCT_INT" -lt "$MIN" ]; then
                echo "Coverage ${PCT_INT}% is below minimum ${MIN}%"
                exit 1
              fi
            else
              echo "Warning: could not parse coverage percentage from Summary.txt"
            fi
          else
            echo "coverage-report/Summary.txt not found; skipping coverage gate."
          fi
